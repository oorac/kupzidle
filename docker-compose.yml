services:

  mysql:
    image: mysql
    container_name: ${PROJECT_NAME}_MySQL
    restart: always
    ports:
      - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_GENERAL_LOG: 1
    volumes:
      - ./.docker/data_mysql/db/:/var/lib/mysql:delegated
      - ./.docker/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  php:
    build:
      context: .
      dockerfile: ./.docker/Dockerfile
    container_name: ${PROJECT_NAME}_PHP
    environment:
      PHP_MAX_FILE_UPLOADS: 2048M
      PHP_UPLOAD_MAX_FILESIZE: 50M
      PHP_POST_MAX_SIZE: 700M
      PHP_MEMORY_LIMIT: 1024M
      PHP_MAX_INPUT_VARS: 5000
      PHP_MAX_INPUT_TIME: 5000
    volumes:
      - ./:/srv:delegated
    working_dir: /srv
    networks:
      - mynetwork
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  nginx:
    container_name: ${PROJECT_NAME}_Nginx
    image: nginx:1.19.4-alpine
    volumes:
      - ./www:/srv/www:delegated
      - ./.docker/nginx/default.conf:/etc/nginx/templates/default.conf.template:delegated
    environment:
      - NGINX_PHP_HOST=php
      - MYSQL_HOST=mysql
    ports:
      - 8103:80
    depends_on:
      php:
        condition: service_started
    networks:
      - mynetwork

  adminer:
    image: adminer
    container_name: ${PROJECT_NAME}_Adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    ports:
      - 8101:8080
    networks:
      - mynetwork

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: ${PROJECT_NAME}_RabbitMQ
    hostname: localhost
    environment:
      RABBITMQ_ERLANG_COOKIE: "secret"
      RABBITMQ_DEFAULT_VHOST: "localhost"
      RABBITMQ_DEFAULT_HOST: ${RABBITMQ_HOST}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./.docker/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    ports:
      - "5672:5672" # AMQP protocol
      - "15672:15672" # Web management interface
    expose:
      - "5672"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  amqproxy:
    image: cloudamqp/amqproxy:v0.8.2
    container_name: ${PROJECT_NAME}_AMQProxy
    environment:
      AMQP_URL: 'amqp://rabbitmq:5672'
      LISTEN_PORT: "5672"
    ports:
      - "5673:5672"
    expose:
      - "5672"
    networks:
      - mynetwork

#  prometheus:
#    image: prom/prometheus
#    container_name: prometheus
#    volumes:
#      - ./.docker/prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    networks:
#      - mynetwork

#  grafana:
#    image: grafana/grafana
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    networks:
#      - mynetwork

volumes:
  rabbitmq_data:

networks:
  mynetwork:
    driver: bridge